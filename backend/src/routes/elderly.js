// routes/users.js
const express = require('express');
const router = express.Router();
const { requireAuth } = require('../middleware/auth');
const RouteHistoryService = require('../services/routeHistory');
const HelpRequest = require('../services/helpRequest');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const ElderlyController = require('../controllers/elderlyController');

// For file upload when creating help request
// Create uploads folder if it doesn't exist
const uploadPath = path.join(__dirname, "../services/uploads");
if (!fs.existsSync(uploadPath)) {
  fs.mkdirSync(uploadPath, { recursive: true });
}

var storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadPath)
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname)) //Appending extension
    }
})

const upload = multer({ storage: storage });



router.get('/profile', requireAuth, ElderlyController.getProfile);
router.put('/profile', requireAuth, ElderlyController.updateProfile);

// PIN Management routes
router.get('/linking-pin', requireAuth, ElderlyController.getLinkingPIN);
router.post('/linking-pin/regenerate', requireAuth, ElderlyController.regenerateLinkingPIN);
router.get('/linked-caregivers', requireAuth, ElderlyController.getLinkedCaregivers);

router.get('/getCompletedHelpRequestswithVolunteer/:userID', async (req, res) => {

    try {
        var userID = req.params.userID;
        
        const result = await HelpRequest.getCompletedHelpRequestswithVolunteer(userID);

        console.log(result);


        res.status(200).json(result);
    } catch (error) {
        console.log(error);

        console.error('Error creating help request:', error);
        res.status(500).json({ error: 'Internal server error' });
    }


});



// POST /api/elderly/requestHelp - Create new help request
router.post('/requestHelp', upload.single('image'),/*  requireAuth, */ async (req, res) => {

    try {
        var userID = req.body.userID;
        var longitude = req.body.longitude;
        var latitude = req.body.latitude;
        var address = req.body.location;
        var description = req.body.description;
        var urgency = req.body.urgency;
        if (req.file) {
            var uploadedFilename = req.file.filename; // Get the filename generated by diskStorage
        } else {
            var uploadedFilename = null;
        }


        // TODO: convert location to longitude and latitude



        const result = await HelpRequest.createRequest(userID, longitude, latitude, address, description, urgency,uploadedFilename);

        console.log(result);

        // TODO: Alert neaby volunteers


        res.status(200).send("success");

    } catch (error) {
        console.log(error);

        console.error('Error creating help request:', error);
        res.status(500).json({ error: 'Internal server error' });

    }

});

// Route history endpoints
router.post('/route-history', requireAuth, async (req, res) => {
    try {
        const { 
            from, 
            to, 
            mode, 
            duration, 
            accessibility, 
            completedAt, 
            steps, 
            isRecommended,
            userLocation,
            locationPermission
        } = req.body;
        const userId = req.user.id;

        // Validate required fields
        if (!from || !to || !mode || !duration) {
            return res.status(400).json({ 
                error: 'Missing required fields: from, to, mode, duration are required' 
            });
        }

        // Prepare route history data
        const routeHistoryData = {
            userId,
            from,
            to,
            mode,
            duration,
            accessibility: accessibility || 'Standard',
            completedAt: new Date(completedAt),
            steps: steps || 0,
            isRecommended: isRecommended || false,
            // Include geolocation data if available
            userLocation: userLocation || null,
            locationPermission: locationPermission || null
        };

        // Save to Supabase
        const savedRoute = await RouteHistoryService.saveRouteHistory(routeHistoryData);
        
        res.status(200).json({ 
            message: 'Route history saved successfully',
            routeHistory: savedRoute
        });

    } catch (error) {
        console.error('Error saving route history:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            details: error.message 
        });
    }
});

router.get('/route-history', requireAuth, async (req, res) => {
    try {
        const userId = req.user.id;
        const limit = parseInt(req.query.limit) || 10;
        const offset = parseInt(req.query.offset) || 0;

        // Fetch from Supabase
        const routeHistory = await RouteHistoryService.getRouteHistory(userId, limit, offset);
        
        // Transform data to match frontend expectations
        const transformedHistory = routeHistory.map(route => ({
            id: route.id,
            from: route.from_location,
            to: route.to_location,
            mode: route.mode,
            duration: route.duration,
            accessibility: route.accessibility,
            completedAt: route.completed_at,
            steps: route.steps,
            isRecommended: route.is_recommended
        }));

        res.status(200).json({ 
            message: 'Route history retrieved successfully',
            history: transformedHistory 
        });

    } catch (error) {
        console.error('Error fetching route history:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            details: error.message 
        });
    }
});

// Delete a specific route from history
router.delete('/route-history/:routeId', requireAuth, async (req, res) => {
    try {
        const { routeId } = req.params;
        const userId = req.user.id;

        if (!routeId) {
            return res.status(400).json({ error: 'Route ID is required' });
        }

        const success = await RouteHistoryService.deleteRouteHistory(routeId, userId);
        
        if (success) {
            res.status(200).json({ 
                message: 'Route deleted successfully' 
            });
        } else {
            res.status(404).json({ 
                error: 'Route not found or access denied' 
            });
        }

    } catch (error) {
        console.error('Error deleting route history:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            details: error.message 
        });
    }
});

// Get route statistics for the user
router.get('/route-history/stats', requireAuth, async (req, res) => {
    try {
        const userId = req.user.id;

        const stats = await RouteHistoryService.getRouteStatistics(userId);
        
        res.status(200).json({ 
            message: 'Route statistics retrieved successfully',
            statistics: stats 
        });

    } catch (error) {
        console.error('Error fetching route statistics:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            details: error.message 
        });
    }
});

module.exports = router;
